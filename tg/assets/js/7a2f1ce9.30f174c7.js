"use strict";(self.webpackChunkm_19_v=self.webpackChunkm_19_v||[]).push([[3565],{5775:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"notes/software-engineering/argocd","title":"ArgoCD","description":"- 1. Intro","source":"@site/docs/notes/software-engineering/argocd.md","sourceDirName":"notes/software-engineering","slug":"/notes/software-engineering/argocd","permalink":"/tg/docs/notes/software-engineering/argocd","draft":false,"unlisted":false,"editUrl":"https://github.com/m19v/m19v.github.io/blob/main/docs/notes/software-engineering/argocd.md","tags":[],"version":"current","lastUpdatedBy":"m19v","lastUpdatedAt":1761828399000,"frontMatter":{"title":"ArgoCD"},"sidebar":"tutorialSidebar","previous":{"title":"Ansible","permalink":"/tg/docs/notes/software-engineering/ansible"},"next":{"title":"Bash","permalink":"/tg/docs/notes/software-engineering/bash"}}');var i=r(4848),o=r(8453);const t={title:"ArgoCD"},l="1. Intro",c={},a=[];function d(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#1-intro",children:"1. Intro"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#2-cd-workflow-without-argocd",children:"2. CD Workflow without ArgoCD"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#3-cd-workflow-with-argocd",children:"3. CD Workflow with ArgoCD"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#4-git-as-single-source-of-truth",children:"4. Git as Single Source of Truth"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#5-easy-rollback",children:"5. Easy Rollback"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#6-cluster-disaster-recovery",children:"6. Cluster Disaster Recovery"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#7-k8s-access-control-with-git--argocd",children:"7. K8s Access Control with Git & ArgoCD"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#8-argocd-as-k8s-extension",children:"8. ArgoCD as K8s extension"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#9-configure-argocd",children:"9. Configure ArgoCD"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#10-multiple-clusters-with-argocd",children:"10. Multiple Clusters with ArgoCD"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#11-replacement-for-other-cicd-tools",children:"11. Replacement for other CI/CD tools?"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#12-demo",children:"12. Demo"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#13-references",children:"13. References"})}),"\n"]}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"1-intro",children:"1. Intro"})}),"\n",(0,i.jsx)(n.p,{children:"ArgoCD is a GitOps Continuous Delivery Tool for Kubernetes. ArgoCD supports k8s yaml files, helm charts and kustomize."}),"\n",(0,i.jsx)(n.h1,{id:"2-cd-workflow-without-argocd",children:"2. CD Workflow without ArgoCD"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"CI:"})," Code commit -> Build,Test -> Build and Push Docker images to Registry -> ...",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"CD:"})," ... -> Update k8s manifest -> kubectl apply..."]}),"\n",(0,i.jsx)(n.p,{children:"Challenges of above approach:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Install and setup tools like ",(0,i.jsx)(n.code,{children:"kubectl"})]}),"\n",(0,i.jsx)(n.li,{children:"Configure access to K8s cluster"}),"\n",(0,i.jsx)(n.li,{children:"Configure access to Cloud Platform"}),"\n",(0,i.jsx)(n.li,{children:"Security challenge"}),"\n",(0,i.jsx)(n.li,{children:"No visibility of deployment status"}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"3-cd-workflow-with-argocd",children:"3. CD Workflow with ArgoCD"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Deploy ArgoCD in k8s cluster"}),"\n",(0,i.jsx)(n.li,{children:"Configure ArgoCD to track Git repository"}),"\n",(0,i.jsx)(n.li,{children:"ArgoCD monitors for any changes and applies automatically"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"CI:"})," Code commit -> Build,Test -> Build and Push Docker images to Registry -> Update k8s manifest (in separate repo)...",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"CD:"})," ... -> Track and Sync changes by ArgoCD (application configuration repo)..."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," Best Practice for Git repository is to separate ",(0,i.jsx)(n.strong,{children:"application source code"}),", ",(0,i.jsx)(n.strong,{children:"application configuration"})," (also called GitOps repository) and ",(0,i.jsx)(n.strong,{children:"system configuration."})]}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"4-git-as-single-source-of-truth",children:"4. Git as Single Source of Truth"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"K8s configuration defined as Code in Git repository"}),"\n",(0,i.jsx)(n.li,{children:"Desired State is defined in Git repository (i.e. manual change of cluster will be reverted,synced with described state in git)"}),"\n",(0,i.jsx)(n.li,{children:"Git repository is a single interface of version controlled changes"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-md",children:"Git Repository (Desired Target State)   <---\x3e   ArgoCD (Sync Agent)   <---\x3e   Kubernetes Cluster (Actual Live State)\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Info:"})," It is also possible to configure ArgoCD to not sync manual cluster changes automatically but send alert instead."]}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"5-easy-rollback",children:"5. Easy Rollback"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Declarative - declare your desired end state"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"git revert ..."})," to previous working state"]}),"\n",(0,i.jsxs)(n.li,{children:["No need to manually revert every update in the cluster (e.g. ",(0,i.jsx)(n.code,{children:"kubectl delete ..."})," or ",(0,i.jsx)(n.code,{children:"helm uninstall ..."}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"6-cluster-disaster-recovery",children:"6. Cluster Disaster Recovery"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If cluster A fails, just create new cluster B and refer to declared state in git application configuration repository"}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"7-k8s-access-control-with-git--argocd",children:"7. K8s Access Control with Git & ArgoCD"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Manage Cluster Access indirectly via Git","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No every developer should have access to application configuration git repository, but only create Merge Requests"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"No need to create ClusterRole & User resources in K8s"}),"\n",(0,i.jsxs)(n.li,{children:["No need to give access to external CI/CD tools (e.g. Jenkins) to K8s Cluster to apply changes as ArgoCD agent already runs in Cluster and sync desired state","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No cluster credentials outside of K8s"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"8-argocd-as-k8s-extension",children:"8. ArgoCD as K8s extension"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["ArgoCD uses existing K8s functionalities","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"e.g. using etcd to store data"}),"\n",(0,i.jsx)(n.li,{children:"e.g. using k8s controllers for monitoring and comparing actual and desired state"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Visibility in the Cluster, which other tools (e.g. Jenkins) does not have"}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"9-configure-argocd",children:"9. Configure ArgoCD"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Deploy ArgoCD into K8s Cluster (Extends K8s API with ",(0,i.jsx)(n.code,{children:"crd"})," Custom Resource Definition)"]}),"\n",(0,i.jsxs)(n.li,{children:["Configure ArgoCD with K8s yaml file","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Main Resource is ",(0,i.jsx)(n.code,{children:"Application"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: argoproj.io/v1alpha1\r\nkind: Application\r\nmetadata:\r\nname: guestbook\r\nnamespace: argocd\r\nspec:\r\nproject: default\r\nsource:                                   # desired state\r\n    repoURL: https://github.com/argoproj/argocd-example-apps.git\r\n    targetRevision: HEAD\r\n    path: guestbook\r\ndestination:                              # k8s cluster\r\n    server: https://kubernetes.default.svc\r\n    namespace: guestbook\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Multiple Application can be logically grouped by ",(0,i.jsx)(n.code,{children:"AppProject"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: argoproj.io/v1alpha1\r\nkind: AppProject\r\nmetadata:\r\n    name: my-project\r\n    namespace: argocd\r\n    # Finalizer that ensures that project is not deleted until it is not referenced by any application\r\n    finalizers:\r\n        - resources-finalizer.argocd.argoproj.io\r\nspec:\r\n    description: Example Project\r\n    # Allow manifests to deploy from any Git repos\r\n    sourceRepos:\r\n    - '*'\r\n    # Only permit applications to deploy to the guestbook namespace in the same cluster\r\n    destinations:\r\n    - namespace: guestbook\r\n        server: https://kubernetes.default.svc\r\n    # Deny all cluster-scoped resources from being created, except for Namespace\r\n    clusterResourceWhitelist:\r\n    - group: ''\r\n        kind: Namespace\r\n    # Allow all namespaced-scoped resources to be created, except for ResourceQuota, LimitRange, NetworkPolicy\r\n    namespaceResourceBlacklist:\r\n    - group: ''\r\n        kind: ResourceQuota\r\n    - group: ''\r\n        kind: LimitRange\r\n    - group: ''\r\n        kind: NetworkPolicy\r\n    # Deny all namespaced-scoped resources from being created, except for Deployment and StatefulSet\r\n    namespaceResourceWhitelist:\r\n    - group: 'apps'\r\n        kind: Deployment\r\n    - group: 'apps'\r\n        kind: StatefulSet\r\n    roles:\r\n    # A role which provides read-only access to all applications in the project\r\n    - name: read-only\r\n        description: Read-only privileges to my-project\r\n        policies:\r\n        - p, proj:my-project:read-only, applications, get, my-project/*, allow\r\n        groups:\r\n        - my-oidc-group\r\n    # A role which provides sync privileges to only the guestbook-dev application, e.g. to provide\r\n    # sync privileges to a CI system\r\n    - name: ci-role\r\n        description: Sync privileges for guestbook-dev\r\n        policies:\r\n        - p, proj:my-project:ci-role, applications, sync, my-project/guestbook-dev, allow\r\n        # NOTE: JWT tokens can only be generated by the API server and the token is not persisted\r\n        # anywhere by Argo CD. It can be prematurely revoked by removing the entry from this list.\r\n        jwtTokens:\r\n    - iat: 1535390316\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"10-multiple-clusters-with-argocd",children:"10. Multiple Clusters with ArgoCD"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Configure and manage just 1 ArgoCD for development, staging and production clusters","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Option 1: ",(0,i.jsx)(n.strong,{children:"Multiple git branch"})," for each environment (e.g. development, staging and production branches) - NOT BEST PRACTICE"]}),"\n",(0,i.jsxs)(n.li,{children:["Option 2: Using ",(0,i.jsx)(n.strong,{children:"overlays with Kustomize"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-md",children:"./myapp-cluster\r\n    - base\r\n        - deployment.yaml\r\n        - kustomization.yaml\r\n        - rbac.yaml\r\n        - service.yaml\r\n    - overlays \r\n        - deployment\r\n            - kustomization.yaml\r\n        - staging\r\n            - kustomization.yaml\r\n        - production\r\n            - kustomization.yaml\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Same ArgoCD instance is able to sync a fleet of K8s clusters"}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"11-replacement-for-other-cicd-tools",children:"11. Replacement for other CI/CD tools?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No, we still need CI Pipeline to test and build application"}),"\n",(0,i.jsxs)(n.li,{children:["ArgoCD is a ",(0,i.jsx)(n.strong,{children:"Replacement for CD"})," (Continuous Delivery) specifically for Kubernetes"]}),"\n",(0,i.jsx)(n.li,{children:"ArgoCD alternatives: FluxCD, JenkinsX"}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"12-demo",children:"12. Demo"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Install ArgoCD in K8s cluster"}),"\n",(0,i.jsxs)(n.li,{children:["Configure ArgoCD with ",(0,i.jsx)(n.code,{children:"Application"})," CRD","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Test it using ",(0,i.jsx)(n.a,{href:"https://gitlab.com/nanuchi/argocd-app-config",children:"demo git repository"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h1,{id:"13-references",children:"13. References"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://youtu.be/MeU5_k9ssrs?si=THME2fb5U9MYR2Ow",children:"ArgoCD Tutorial for Beginners"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var s=r(6540);const i={},o=s.createContext(i);function t(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);